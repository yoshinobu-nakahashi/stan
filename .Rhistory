calc_var_vec(init_vec, df)
optim(par = init_vec,
fn = calc_var_vec, vec = vec, df = df)
optim(par = init_vec,
fn = calc_var_vec, vec = init_vec, df = df)
optim(init_vec,
fn = calc_var_vec, vec = init_vec, df = df)
optim(init_vec,
fn = calc_var_vec)
optim(init_vec,
fn = calc_var_vec, df = df)
optim(init_vec,
fn = calc_var_vec, df = df,
control = list(fnscale = -1))
prcomp(df)
res_pca <- prcomp(df)
sig
cov(df)
sig[1:5, 1:5]
cov(df)[1:5, 1:5]
res <- eigen(sig)
res
res$values
res$vectors
norm(init_vec)
FITBIT_KEY    <- "238SL5"
FITBIT_SECRET <- "a7e2b6bd1bdb32d40978c81c2bb7eaf7"
### teramonagi's fitbitr
# remove.packages("fitbitr")
# devtools::install_github("teramonagi/fitbitr")
library(fitbitr)
token <- fitbitr::oauth_token()
library(tidyverse)
df <- data.frame(
"a" = c(1, 1, 1, 0, 0, 0, NA, NA, NA),
"b" = c(1, 0, NA, 1, 0, NA, 1, 0, NA)
)
df
df <- data.frame(
"a" = c(1, 1, 1, 0, 0, 0, NA, NA, NA),
"b" = c(1, 0, NA, 1, 0, NA, 1, 0, NA),
"c" = rep("aa", 9)
)
df
df %>%
mutate(d = if_else(a == 1 & b == 1, 1, 0))
df <- data.frame(
"a" = c(1, 1, 1, 0, 0, 0, NA, NA, NA),
"b" = c(1, 0, NA, 1, 0, NA, 1, 0, NA),
)
df %>%
mutate(d = if_else(a == 1 & b == 1, 1, 0))
df <- data.frame(
"a" = c(1, 1, 1, 0, 0, 0, NA, NA, NA),
"b" = c(1, 0, NA, 1, 0, NA, 1, 0, NA)
)
df %>%
mutate(d = if_else(a == 1 & b == 1, 1, 0))
as.Date("2022-07-01")
date1 <- as.Date("2022-07-01")
date2 <- as.Date("2022-07-31")
difftime(date1, date2, units = "days")
date1 <- as.Date("2022-07-01")
date2 <- as.Date("2022-07-31")
as.integer(difftime(date2, date1, units = "days"))
min_date <- ymd_hms(paste("2022-06-22", "00:00:00"))
max_date <- ymd_hms(paste("2022-10-07", "23:59:00"))
library(lubridate)
min_date <- ymd_hms(paste("2022-06-22", "00:00:00"))
max_date <- ymd_hms(paste("2022-10-07", "23:59:00"))
seq(min_date, max_date, by = 60)
?glm
install.packages("magick")
install.packages("ggExtra")
setwd("~/OneDrive - 株式会社JDSC/Project/PCN/PCN-F/Analysis/")
source("GitHub/pcn-f-sensor-analysis/r/common/project_setup.R")
library(plotly)
library(GGally)
library(ggridges)
theme_set(theme_gray(base_family = "HiraKakuPro-W3"))
con <- get_athena_connection()
df_sens_sample <- dbFetch(dbSendQuery(con, query))
query <- "SELECT * FROM ra_status_dgc WHERE edgedeviceid = '194441' AND session_id = 16;"
df_sens_sample <- dbFetch(dbSendQuery(con, query))
df_sens_sample
colnames(df_sens_sample)
df_sens_sample %>% arrange(updatedatetime)
con <- get_athena_connection(schema = "pcn_f2_unified")
query <- "SELECT * FROM ra_status_dgc WHERE edgedeviceid = '194441' AND session_id = 16;"
df_sens_sample <- dbFetch(dbSendQuery(con, query))
df_sens_sample %>% arrange(updatedatetime)
install.packages("psych")
library(psych)
library(lubridate)
times <- c("23:30:00", "01:30:00")
mean(times)
hms::as_hms(times)
mean(hms::as_hms(times))
circadian.mean(hms::as_hms(times))
times <- c("23:30:00", "01:30:00", "02:15:14")
circadian.mean(hms::as_hms(times))
hms::as_hms(times)
circadian.mean(hms::as_hms(times))
hour(times)
install.packages("CircStats")
library(CircStats)
circ.mean(2 * pi * c(100, 86000) / 86400)
circ.mean(2 * pi * c(100, 86000) / (2 * pi * 86400))
df <- tibble("DOB" = c("2014-07-09 2:01:01"))
library(tidyverse)
library(tidyverse)
library(lubridate)
df <- tibble("DOB" = c("2014-07-09 2:01:01"))
df
df <- tibble("DOB" = c("2014-07-09 2:01:01", "2015-07-15 23:58:58", "2016-07-24 22:48:30", "2017-7-24 23:59:59"))
df
df <- tibble("DOB" = c("2014-07-09 2:01:01", "2015-07-15 23:58:58", "2016-07-24 22:48:30", "2017-07-24 23:59:59"))
df %>%
mutate(DOB2 = as_datetime(DOB))
df %>%
mutate(birth_time = hms::as_hms(as_datetime(DOB)))
df %>%
mutate(birth_time = hms::as_hms(as_datetime(DOB))) %>%
mutate(birth_sec = as.numeric(birth_time))
df %>%
mutate(birth_time = hms::as_hms(as_datetime(DOB))) %>%
mutate(birth_sec = as.numeric(birth_time)) %>%
mutate(sec_angle = birth_sec / 86400)
df %>%
mutate(birth_time = hms::as_hms(as_datetime(DOB))) %>%
mutate(birth_sec = as.numeric(birth_time)) %>%
mutate(sec_angle = birth_sec / 86400) %>%
mutate(circ_mean = CircStats::circ.mean(sec_angle))
df %>%
mutate(birth_time = hms::as_hms(as_datetime(DOB))) %>%
mutate(birth_sec = as.numeric(birth_time)) %>%
mutate(sec_angle = birth_sec / 86400) %>%
mutate(circ_mean = CircStats::circ.mean(sec_angle)) %>%
mutate(sec_mean_angle = circ_mean * 86400)
df %>%
mutate(birth_time = hms::as_hms(as_datetime(DOB))) %>%
mutate(birth_sec = as.numeric(birth_time)) %>%
mutate(sec_angle = birth_sec / 86400) %>%
mutate(circ_mean = CircStats::circ.mean(sec_angle)) %>%
mutate(sec_mean_angle = circ_mean * 86400) %>%
mutate(birth_mean = hms::as_hms(sec_mean_angle))
df %>%
mutate(birth_time = hms::as_hms(as_datetime(DOB))) %>%
mutate(birth_sec = as.numeric(birth_time)) %>%
mutate(sec_angle = birth_sec / 86400) %>%
mutate(circ_mean = CircStats::circ.mean(sec_angle * 2 * pi) / (2 * pi) * 86400) %>%
mutate(sec_mean_angle = circ_mean * 86400) %>%
mutate(birth_mean = hms::as_hms(sec_mean_angle))
df %>%
mutate(birth_time = hms::as_hms(as_datetime(DOB))) %>%
mutate(birth_sec = as.numeric(birth_time)) %>%
mutate(sec_angle = birth_sec / 86400) %>%
mutate(circ_mean = CircStats::circ.mean(sec_angle * 2 * pi) / (2 * pi) * 86400) %>%
mutate(sec_mean_angle = circ_mean) %>%
mutate(birth_mean = hms::as_hms(sec_mean_angle))
df <- tibble("DOB" = c("2014-07-09 1:30:00", "2015-07-15 22:30:00", "2016-07-24 21:00:00", "2017-07-24 3:00:00"))
df %>%
mutate(birth_time = hms::as_hms(as_datetime(DOB))) %>%
mutate(birth_sec = as.numeric(birth_time)) %>%
mutate(sec_angle = birth_sec / 86400) %>%
mutate(circ_mean = CircStats::circ.mean(sec_angle * 2 * pi) / (2 * pi) * 86400) %>%
mutate(sec_mean_angle = circ_mean) %>%
mutate(birth_mean = hms::as_hms(sec_mean_angle))
df <- tibble("DOB" = c("2014-07-09 2:30:00", "2015-07-15 22:30:00", "2016-07-24 21:00:00", "2017-07-24 3:00:00"))
df %>%
mutate(birth_time = hms::as_hms(as_datetime(DOB))) %>%
mutate(birth_sec = as.numeric(birth_time)) %>%
mutate(sec_angle = birth_sec / 86400) %>%
mutate(circ_mean = CircStats::circ.mean(sec_angle * 2 * pi) / (2 * pi) * 86400) %>%
mutate(sec_mean_angle = circ_mean) %>%
mutate(birth_mean = hms::as_hms(sec_mean_angle))
df <- tibble("DOB" = c("2014-07-09 2:30:00", "2015-07-15 22:30:00", "2016-07-24 22:15:00", "2017-07-24 3:00:00"))
df %>%
mutate(birth_time = hms::as_hms(as_datetime(DOB))) %>%
mutate(birth_sec = as.numeric(birth_time)) %>%
mutate(sec_angle = birth_sec / 86400) %>%
mutate(circ_mean = CircStats::circ.mean(sec_angle * 2 * pi) / (2 * pi) * 86400) %>%
mutate(sec_mean_angle = circ_mean) %>%
mutate(birth_mean = hms::as_hms(sec_mean_angle))
2
df <- tibble("DOB" = c("2014-07-09 2:01:01", "2015-07-15 23:58:58", "2016-07-24 22:48:30", "2017-07-24 23:59:59"))
df %>%
mutate(birth_time = hms::as_hms(as_datetime(DOB))) %>%
mutate(birth_sec = as.numeric(birth_time)) %>%
mutate(sec_angle = birth_sec / 86400) %>%
mutate(circ_mean = CircStats::circ.mean(sec_angle * 2 * pi) / (2 * pi) * 86400) %>%
mutate(sec_mean_angle = circ_mean) %>%
mutate(birth_mean = hms::as_hms(sec_mean_angle))
# mutate(circ_mean = CircStats::circ.mean(sec_angle * 2 * pi) / (2 * pi) * 86400) %>%
mutate(circ_mean = CircStats::circ.mean(sec_angle * 86400) %>%
df %>%
mutate(birth_time = hms::as_hms(as_datetime(DOB))) %>%
mutate(birth_sec = as.numeric(birth_time)) %>%
mutate(sec_angle = birth_sec / 86400) %>%
# mutate(circ_mean = CircStats::circ.mean(sec_angle * 2 * pi) / (2 * pi) * 86400) %>%
mutate(circ_mean = CircStats::circ.mean(sec_angle * 86400)) %>%
mutate(sec_mean_angle = circ_mean) %>%
mutate(birth_mean = hms::as_hms(sec_mean_angle))
df %>%
df %>%
mutate(birth_time = hms::as_hms(as_datetime(DOB))) %>%
mutate(birth_sec = as.numeric(birth_time)) %>%
mutate(sec_angle = birth_sec / 86400) %>%
# mutate(circ_mean = CircStats::circ.mean(sec_angle * 2 * pi) / (2 * pi) * 86400) %>%
mutate(circ_mean = CircStats::circ.mean(sec_angle * 86400)) %>%
mutate(sec_mean_angle = circ_mean) %>%
mutate(birth_mean = hms::as_hms(sec_mean_angle))
df %>%
mutate(birth_time = hms::as_hms(as_datetime(DOB))) %>%
mutate(birth_sec = as.numeric(birth_time)) %>%
mutate(sec_angle = birth_sec / 86400) %>%
# mutate(circ_mean = CircStats::circ.mean(sec_angle * 2 * pi) / (2 * pi) * 86400) %>%
mutate(circ_mean = CircStats::circ.mean(sec_angle * 86400)) %>%
mutate(sec_mean_angle = circ_mean) %>%
mutate(birth_mean = hms::as_hms(sec_mean_angle))
df %>%
mutate(birth_time = hms::as_hms(as_datetime(DOB))) %>%
mutate(birth_sec = as.numeric(birth_time)) %>%
mutate(sec_angle = birth_sec / 86400) %>%
mutate(circ_mean = CircStats::circ.mean(sec_angle * 2 * pi) / (2 * pi) * 86400) %>%
# mutate(circ_mean = CircStats::circ.mean(sec_angle * 86400)) %>%
mutate(sec_mean_angle = circ_mean) %>%
mutate(birth_mean = hms::as_hms(sec_mean_angle))
df %>%
mutate(birth_time = hms::as_hms(as_datetime(DOB))) %>%
mutate(birth_sec = as.numeric(birth_time)) %>%
mutate(sec_angle = birth_sec / 86400) %>%
mutate(circ_mean = CircStats::circ.mean(sec_angle * 2 * pi) / (2 * pi) * 86400) %>%
mutate(sec_mean_angle = circ_mean) %>%
mutate(birth_mean = hms::as_hms(sec_mean_angle))
df %>%
mutate(birth_time = hms::as_hms(as_datetime(DOB))) %>%
mutate(birth_sec = as.numeric(birth_time)) %>%
mutate(sec_angle = birth_sec / 86400) %>%
mutate(circ_mean = CircStats::circ.mean(sec_angle * 2 * pi) / (2 * pi) * 86400) %>%
mutate(birth_mean = hms::as_hms(circ_mean))
df <- tibble("DOB" = c("2014-07-09 2:30:00", "2015-07-15 21:30:00", "2016-07-24 22:00:00", "2017-07-24 2:10:00"))
df %>%
mutate(birth_time = hms::as_hms(as_datetime(DOB))) %>%
mutate(birth_sec = as.numeric(birth_time)) %>%
mutate(sec_angle = birth_sec / 86400) %>%
mutate(circ_mean = CircStats::circ.mean(sec_angle * 2 * pi) / (2 * pi) * 86400) %>%
mutate(birth_mean = hms::as_hms(circ_mean))
df <- tibble("DOB" = c("2014-07-09 2:30:00", "2015-07-15 21:30:00", "2016-07-24 22:00:00", "2017-07-24 2:15:00"))
df %>%
mutate(birth_time = hms::as_hms(as_datetime(DOB))) %>%
mutate(birth_sec = as.numeric(birth_time)) %>%
mutate(sec_angle = birth_sec / 86400) %>%
mutate(circ_mean = CircStats::circ.mean(sec_angle * 2 * pi) / (2 * pi) * 86400) %>%
mutate(birth_mean = hms::as_hms(circ_mean))
df <- tibble("DOB" = c("2014-07-09 2:30:00", "2015-07-15 21:30:00", "2016-07-24 22:00:00", "2017-07-24 2:00:00"))
df %>%
mutate(birth_time = hms::as_hms(as_datetime(DOB))) %>%
mutate(birth_sec = as.numeric(birth_time)) %>%
mutate(sec_angle = birth_sec / 86400) %>%
mutate(circ_mean = CircStats::circ.mean(sec_angle * 2 * pi) / (2 * pi) * 86400) %>%
mutate(birth_mean = hms::as_hms(circ_mean))
df <- tibble("DOB" = c("2014-07-09 6:30:00", "2015-07-15 10:30:00", "2016-07-24 22:00:00", "2017-07-24 2:00:00"))
df %>%
mutate(birth_time = hms::as_hms(as_datetime(DOB))) %>%
mutate(birth_sec = as.numeric(birth_time)) %>%
mutate(sec_angle = birth_sec / 86400) %>%
mutate(circ_mean = CircStats::circ.mean(sec_angle * 2 * pi) / (2 * pi) * 86400) %>%
mutate(birth_mean = hms::as_hms(circ_mean))
df <- tibble("DOB" = c("2014-07-09 21:30:00", "2015-07-15 0:30:00", "2016-07-24 22:30:00", "2017-07-30 1:30:00", "2017-07-24 4:30:00"))
df %>%
mutate(birth_time = hms::as_hms(as_datetime(DOB))) %>%
mutate(birth_sec = as.numeric(birth_time)) %>%
mutate(sec_angle = birth_sec / 86400) %>%
mutate(circ_mean = CircStats::circ.mean(sec_angle * 2 * pi) / (2 * pi) * 86400) %>%
mutate(birth_mean = hms::as_hms(circ_mean))
?cor
1824 + 17711
?minerva::mine
library(tidyverse, warn.conflicts = F)
library(lubridate, warn.conflicts = F)
library(bigrquery, warn.conflicts = F)
library(patchwork, warn.conflicts = F)
bq_auth(cache = TRUE)
### Set connection
bq_auth(cache = TRUE)
project_id = "nco-frailty"
dataset_id = "nco_frailty_toyoake_dataportal_v2_2"
con <- DBI::dbConnect(
bigrquery::bigquery(),
project = project_id,
dataset = dataset_id
)
sql <- "
SELECT *
FROM `nco-frailty.nco_frailty_toyoake_preprocessed.preprocessed_int_power`
WHERE house_id = 5 AND (date = '2022-12-26' OR date = '2022-12-19')"
tb  <- bq_project_query(project_id, sql)
df_pre_int <- bq_table_download(tb, n_max = Inf)
df_pre_int %>%
mutate(hms = hms::as_hms(timestamp)) %>%
ggplot(aes(x = hms, y = int_power, group = as.factor(day), color = as.factor(day))) +
geom_line() +
theme(axis.text.x = element_text(angle = 90)) +
# theme(legend.text = ) +
scale_color_hue(name = "", labels = c("19" = "2022-12-19", "26" ="一週間後の同一曜日") ) +
labs(x = "", y = "int power") +
NULL
df_pre_int %>%
mutate(hms = hms::as_hms(timestamp)) %>%
ggplot(aes(x = hms, y = int_power, group = as.factor(day), color = as.factor(day))) +
geom_line() +
theme(axis.text.x = element_text(angle = 90)) +
theme(legend.position = "top") +
scale_color_hue(name = "", labels = c("19" = "2022-12-19", "26" ="一週間後の同一曜日") ) +
labs(x = "", y = "int power") +
NULL
ggsave("~/Desktop/tmp.png", height = 7, width = 7)
print(cos_sim <- lsa::cosine(df_pre_int[df_pre_int$day == 19, "int_power"],
)
)
print(cos_sim <- lsa::cosine(df_pre_int[df_pre_int$day == 19, "int_power"],
df_pre_int[df_pre_int$day == 19, "int_power"]))
df_pre_int
df_pre_int[df_pre_int$day == 19, ]
df_pre_int[df_pre_int$day == 19, "int_power"]
tmp <- as.data.frame(df_pre_int)
print(cos_sim <- lsa::cosine(tmp[tmp$day == 19, "int_power"],
tmp[tmp$day == 19, "int_power"]))
print(cos_sim <- lsa::cosine(tmp[tmp$day == 19, "int_power"],
tmp[tmp$day == 26, "int_power"]))
sql <- "
SELECT *
FROM `nco-frailty.nco_frailty_toyoake_preprocessed.preprocessed_int_power`
WHERE house_id = 5 AND (date = '2022-12-26' OR date = '2022-12-19' OR date = '2023-01-02')"
tb  <- bq_project_query(project_id, sql)
df_pre_int <- bq_table_download(tb, n_max = Inf)
print(cos_sim <- lsa::cosine(tmp[tmp$day == 19, "int_power"],
tmp[tmp$day == 26, "int_power"]))
print(cos_sim <- lsa::cosine(tmp[tmp$day == 26, "int_power"],
tmp[tmp$day == 2, "int_power"]))
tmp
table(tmp$day)
df_pre_int
table(df_pre_int$day)
tmp <- as.data.frame(df_pre_int)
print(cos_sim <- lsa::cosine(tmp[tmp$day == 19, "int_power"],
tmp[tmp$day == 26, "int_power"]))
print(cos_sim <- lsa::cosine(tmp[tmp$day == 26, "int_power"],
tmp[tmp$day == 2, "int_power"]))
r <- paste0("類似度 :", sprintf("%.3f", cos_sim))
g <- df_pre_int %>%
mutate(hms = hms::as_hms(timestamp)) %>%
ggplot(aes(x = hms, y = int_power, group = as.factor(day), color = as.factor(day))) +
geom_line() +
theme(axis.text.x = element_text(angle = 90)) +
theme(legend.position = "top") +
scale_color_hue(name = "", labels = c("19" = "2022-12-19", "26" ="一週間後の同一曜日") ) +
labs(x = "", y = "int power") +
annotate("text", x = -Inf, y = Inf, label = r, hjust = -.2, vjust = 2, size = 18/.pt) +
NULL
# head(100)
g
theme_set(theme(axis.title.x = element_text(size = 18),
axis.title.y = element_text(size = 18, angle = 90),
axis.text.x = element_text(size = 18),
axis.text.y = element_text(size = 18),
legend.position = "top",
legend.title = element_text(size = 18),
legend.text = element_text(size = 18)))
g <- df_pre_int %>%
mutate(hms = hms::as_hms(timestamp)) %>%
ggplot(aes(x = hms, y = int_power, group = as.factor(day), color = as.factor(day))) +
geom_line() +
theme(axis.text.x = element_text(angle = 90)) +
theme(legend.position = "top") +
scale_color_hue(name = "", labels = c("19" = "2022-12-19", "26" ="一週間後の同一曜日") ) +
labs(x = "", y = "int power") +
annotate("text", x = -Inf, y = Inf, label = r, hjust = -.2, vjust = 2, size = 12/.pt) +
NULL
# head(100)
g
sql <- "
SELECT *
FROM `nco-frailty.nco_frailty_toyoake_preprocessed.preprocessed_int_power`
WHERE house_id = 5 AND (date = '2022-12-26' OR date = '2022-12-19')"
tb  <- bq_project_query(project_id, sql)
df_pre_int <- bq_table_download(tb, n_max = Inf)
tmp <- as.data.frame(df_pre_int)
print(cos_sim <- lsa::cosine(tmp[tmp$day == 19, "int_power"],
tmp[tmp$day == 26, "int_power"]))
r <- paste0("類似度 :", sprintf("%.3f", cos_sim))
g <- df_pre_int %>%
mutate(hms = hms::as_hms(timestamp)) %>%
ggplot(aes(x = hms, y = int_power, group = as.factor(day), color = as.factor(day))) +
geom_line() +
theme(axis.text.x = element_text(angle = 90)) +
theme(legend.position = "top") +
scale_color_hue(name = "", labels = c("19" = "2022-12-19", "26" ="一週間後の同一曜日") ) +
labs(x = "", y = "int power") +
annotate("text", x = -Inf, y = Inf, label = r, hjust = -.2, vjust = 2, size = 12/.pt) +
NULL
# head(100)
g
ggsave("~/Desktop/tmp.png", height = 7, width = 7)
g <- df_pre_int %>%
mutate(hms = hms::as_hms(timestamp)) %>%
ggplot(aes(x = hms, y = int_power, group = as.factor(day), color = as.factor(day))) +
geom_line() +
theme(axis.text.x = element_text(angle = 90)) +
theme(legend.position = "top") +
scale_color_hue(name = "", labels = c("19" = "2022-12-19", "26" ="一週間後の同一曜日") ) +
labs(x = "", y = "int power") +
annotate("text", x = -Inf, y = Inf, label = r, hjust = -.2, vjust = 2, size = 16/.pt) +
NULL
# head(100)
g
ggsave("~/Desktop/tmp.png", height = 7, width = 7)
r <- paste0("類似度 : ", sprintf("%.3f", cos_sim))
g <- df_pre_int %>%
mutate(hms = hms::as_hms(timestamp)) %>%
ggplot(aes(x = hms, y = int_power, group = as.factor(day), color = as.factor(day))) +
geom_line() +
theme(axis.text.x = element_text(angle = 90)) +
theme(legend.position = "top") +
scale_color_hue(name = "", labels = c("19" = "2022-12-19", "26" ="一週間後の同一曜日") ) +
labs(x = "", y = "int power") +
annotate("text", x = -Inf, y = Inf, label = r, hjust = -.2, vjust = 2, size = 16/.pt) +
NULL
# head(100)
g
ggsave("~/Desktop/tmp.png", height = 7, width = 7)
g <- df_pre_int %>%
mutate(hms = hms::as_hms(timestamp)) %>%
ggplot(aes(x = hms, y = int_power, group = as.factor(day), color = as.factor(day))) +
geom_line() +
theme(axis.text.x = element_text(angle = 90)) +
theme(legend.position = "top") +
scale_color_hue(name = "", labels = c("19" = "2022-12-19", "26" ="一週間後の同一曜日") ) +
labs(x = "", y = "電力消費量") +
annotate("text", x = -Inf, y = Inf, label = r, hjust = -.2, vjust = 2, size = 16/.pt) +
NULL
# head(100)
g
ggsave("~/Desktop/tmp.png", height = 7, width = 7)
g <- df_pre_int %>%
mutate(hms = hms::as_hms(timestamp)) %>%
ggplot(aes(x = hms, y = int_power, group = as.factor(day), color = as.factor(day))) +
geom_line() +
theme(axis.text.x = element_text(angle = 90)) +
theme(legend.position = "top") +
scale_color_hue(name = "", labels = c("19" = "2022-12-19", "26" ="一週間後の同一曜日") ) +
labs(x = "時刻", y = "電力消費量") +
annotate("text", x = -Inf, y = Inf, label = r, hjust = -.2, vjust = 2, size = 16/.pt) +
NULL
# head(100)
g
ggsave("~/Desktop/tmp.png", height = 7, width = 7)
g <- df_pre_int %>%
mutate(hms = hms::as_hms(timestamp)) %>%
ggplot(aes(x = hms, y = int_power, group = as.factor(day), color = as.factor(day))) +
geom_line() +
theme(axis.text.x = element_text(angle = 90)) +
theme(legend.position = "top") +
scale_color_hue(name = "", labels = c("19" = "2022-12-19", "26" ="一週間後の同一曜日") ) +
labs(x = "時刻", y = "電力消費量") +
annotate("text", x = -Inf, y = Inf, label = r, hjust = -.2, vjust = 2, size = 16/.pt) +
NULL
# head(100)
g
ggsave("~/Desktop/tmp.png", height = 7, width = 7)
?glm
?glmnet
??glmnet
library(glmnet)
install.packages("glmnet")
?glmnet
??glmnet
??glmnet
getwd()
setwd("./Documents/GitHub/stan/")
library(cmdstanr)
d <- read.csv("./input/data-salary.csv")
data <- list(N = nrow(d), X = d$X, Y = d$Y)
model <- cmdstan_model(stan_file = "./model/model4-4.stan")
# we recommend running this is a fresh R session or restarting your current session
# install.packages("cmdstanr", repos = c("https://mc-stan.org/r-packages/", getOption("repos")))
# install.packages("rlang")
cmdstanr::install_cmdstan()
model <- cmdstan_model(stan_file = "./model/model4-4.stan")
model <- cmdstan_model(stan_file = "./model/model4-4.stan")
fit <- model$sample(data = data, seed = 123)
fit$cmdstan_summary()
d <- read.csv("./input/data-salary.csv")
data <- list(N = nrow(d), X = d$X, Y = d$Y)
model <- cmdstan_model(stan_file = "./model/model4-4.stan")
fit <- model$sample(data = data, seed = 123)
fit$cmdstan_summary()
# we recommend running this is a fresh R session or restarting your current session
# install.packages("cmdstanr", repos = c("https://mc-stan.org/r-packages/", getOption("repos")))
# install.packages("rlang")
# cmdstanr::install_cmdstan()
install.packages("coda")
library(coda)
pdf(file = "./output/fit-plot.pdf")
plot(as_mcmc.list(fit))
dev.off()
fit$save_object(file = "./output/result-model4-4.RDS")
write.table(fit$summary(), file = "./output/fit-summary.csv",
sep = ",", quote = TRUE, row.names = FALSE)
fit <- model$sample(data = data, seed = 123, iter_sampling = 5000)
fit$cmdstan_summary()
